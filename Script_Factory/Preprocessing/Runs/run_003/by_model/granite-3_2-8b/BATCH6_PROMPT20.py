# BATCH6_PROMPT20_Granite.py

import string
from emoji import emojize


def encode(text: str) -> str:
    """
    Encodes a given text into an emoji-based substitution cipher.

    :param text: The input string to be encoded.
    :return: Encoded string with each letter replaced by an equivalent emoji.
    """
    # Hard-coded dictionary for substituting letters with emojis
    substitution_dict = {
        'a': 'ğŸ‡¦', 'b': 'ğŸ‡§', 'c': 'ğŸ‡©', 'd': 'ğŸ‡ª', 'e': 'ğŸ‡«', 'f': 'ğŸ‡­', 'g': 'ğŸ‡®', 'h': 'ğŸ‡¯',
        'i': 'ğŸ‡°', 'j': 'ğŸ‡±', 'k': 'ğŸ‡²', 'l': 'ğŸ‡³', 'm': 'ğŸ‡´', 'n': 'ğŸ‡µ', 'o': 'ğŸ‡¶', 'p': 'ğŸ‡·',
        'q': 'ğŸ‡¸', 'r': 'ğŸ‡¹', 's': 'ğŸ‡º', 't': 'ğŸ‡»', 'u': 'ğŸ‡¼', 'v': 'ğŸ‡½', 'w': 'ğŸ‡¾', 'x': 'ğŸ‡¿',
        'y': 'ğŸ‘…', 'z': 'ğŸ‘†'
    }

    # Convert the text to lowercase for uniformity
    text = text.lower()

    # Encode the text using the substitution dictionary
    encoded_text = ''.join(substitution_dict.get(char, char) for char in text if char in substitution_dict)

    return emojize(encoded_text)


def main():
    """
    Main function to demonstrate encoding a sample text.
    """
    sample_text = "Hello, World!"
    encoded_text = encode(sample_text)
    print(f'Encoded: {encoded_text}')


if __name__ == "__main__":
    main()